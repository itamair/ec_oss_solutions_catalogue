<?php

/**
 * @file
 * Contains italo_module.module.
 */

use Drupal\views\Plugin\views\query\Sql;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\media\Entity\Media;

/**
 * Implements hook_page_attachments().
 */
function italo_module_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'italo_module/common';
  $page['#attached']['library'][] = 'italo_module/leaflet_map_interactions';
  $page['#attached']['library'][] = 'italo_module/leaflet_node_forced_bounds';
  $page['#attached']['library'][] = 'italo_module/leaflet-arrowheads';
  $page['#attached']['library'][] = 'italo_module/leaflet_drupal_overrides';
}

/**
 * Implements hook_views_query_alter().
 */
function italo_module_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {

  // Avoiding Paragraphs Duplications in Geoplaces Leaflet View Map.
  // @see https://www.drupal.org/project/paragraphs/issues/2941499
  if ($view->storage->id() == 'geo_places' && $query instanceof Sql) {
    $query->addField('paragraphs_item_field_data_node__field_components', 'id', '', ['function' => 'groupby']);
    $query->addGroupBy('paragraphs_item_field_data_node__field_components.id');
  }
}

/**
 * Implements hook_entity_base_field_info().
 *
 * Generate the Geoimage Caption computed field.
 */
function italo_module_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() === 'media') {
    // Add a field that shows a link to the user's current company.
    $fields['geoimage_caption'] = BaseFieldDefinition::create('string')
      ->setName('geoimage_caption')
      ->setLabel(t('Geoimage Caption'))
      ->setComputed(TRUE)
      ->setClass('\Drupal\italo_module\GeoimageCaptionFieldItemList')
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'region' => 'hidden'
      ]);
  }

  if ($entity_type->id() === 'node') {
    // Add a field that defines the Geoimage Storing Folder.
    $fields['geoimage_storing_folder'] = BaseFieldDefinition::create('string')
      ->setName('geoimage_storing_folder')
      ->setLabel(t('Geoimage Storing Folder'))
      ->setComputed(TRUE)
      ->setClass('\Drupal\italo_module\GeoimageStoringFolderFieldItemList')
      ->setDisplayConfigurable('view', FALSE);

    // Add a field that defines the Territorial Report Level, if active.
    $fields['territorial_report_active_level'] = BaseFieldDefinition::create('string')
      ->setName('territorial_report_active_level')
      ->setLabel(t('Territorial Report Active Level'))
      ->setComputed(TRUE)
      ->setClass('\Drupal\italo_module\TerritorialReportActiveLevelFieldItemList')
      ->setDisplayConfigurable('view', TRUE);

  }
  return $fields;
}

/**
 * Implements hook_views_data_alter().
 */
function italo_module_views_data_alter(array &$data) {
  if (isset($data['node'])) {
    // Add the geoimage_storing_folder field to Views.
    $data['node']['geoimage_storing_folder'] = [
      'title' => t('Geoimage Storing Folder'),
      'field' => [
        'id' => 'field',
        'default_formatter' => 'string',
        'field_name' => 'geoimage_storing_folder',
      ],
    ];

    $data['node']['territorial_report_active_level'] = [
      'title' => t('Territorial Report Active Level'),
      'field' => [
        'id' => 'field',
        'default_formatter' => 'string',
        'field_name' => 'territorial_report_active_level',
      ],
    ];
  }
}

/**
 * Implements hook_ENTITY_TYPE_view() for node entities.
 *
 * Define leaflet 'node_forced_bounds' for specific Node Bundles to dynamically
 * zoom the Leaflet Map on those referenced by the Node being Viewed.
 */
function italo_module_node_view(array &$build, NodeInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  // Define an array on Node Bundles to which apply this functional logic.
  $node_bundles = ['geoplace', 'territorial_report', 'event'];
  if ($view_mode === 'full' && in_array($node->bundle(), $node_bundles)) {
    // Initialise a geofield array that will be populated with Geo Points of
    // Forced Leaflet Map Bounds.
    $geofields = [];
    switch ($node->bundle()) {
      case 'geoplace':
      case 'territorial_report':
      case 'event':
        // Extract Paragraphs components from the field_components.
        $components = $node->get('field_components')->getValue();
        foreach ($components as $component) {
          /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
          $paragraph = Paragraph::load($component['target_id']);

          // If the Component paragraph already contains a geofield use and
          // add it.
          if ($paragraph->field_geofield) {
            $geofields[] = $paragraph->field_geofield->value;
          }
          // Otherwise look for the field_geoimage that should contain Geoimage
          // Media reference, with geofield into it.
          else if ($paragraph->field_geoimage) {
            $media_references = $paragraph->get('field_geoimage')->getValue();
            foreach ($media_references as $media_reference) {
              /** @var \Drupal\media\Entity\Media $paragraph */
              $media = Media::load($media_reference['target_id']);
              if ($media->field_geofield) {
                $geofields[] = $media->field_geofield->value;
              }
            }
          }
        }
        break;
    }
    // if the geofields array is not empty, use it to generate the Forced
    // Leaflet Map Bounds, and pass it into attached js drupalsettings.
    if (!empty($geofields)) {
      /** @var Drupal\leaflet\LeafletService $leafletService */
      $leafletService = \Drupal::service('leaflet.service');
      $geofields = $leafletService->leafletProcessGeofield($geofields);

      // Add DrupalSettings for forcing bounds on this specific Node.
      $build['#attached']['drupalSettings']['leaflet']['node_forced_bounds'] = [
        'node_id' => $node->id(),
        'currentPath' => 'node/' . $node->id(),
        'geofields' => $geofields,
      ];
    }
  }
}
